#!/bin/bash

# determine toplevel directory of x10 installation
ME="$0"
if [ -L "$ME" ]; then
	# TODO: readlink -f is NOT posix, but writing stiff manually is cumbersome
	# so I just hope nobody installs x10firm with symlinks on macs for now.
	ME="`readlink -f "$ME"`"
fi
MYDIR=`dirname "$ME"`
X10_TOP="${MYDIR}/../.."

# prepare classpath
classpath=""
append_classpath() {
	if [ -n "${classpath}" ]; then
		classpath="${classpath}:$1"
	else
		classpath="$1"
	fi
}

append_classpath "${X10_TOP}/x10.compiler/classes"
append_classpath "${X10_TOP}/x10.runtime/classes"
append_classpath "${X10_TOP}/x10.common/classes"
append_classpath "${X10_TOP}/x10.constraints/classes"
append_classpath "${X10_TOP}/x10.dist/lib/lpg.jar"
append_classpath "${X10_TOP}/x10.firm/classes"
append_classpath "${X10_TOP}/jFirm/classes"
append_classpath "${X10_TOP}/liboo/classes"
append_classpath "${X10_TOP}/jFirm/lib/jna.jar"

JNA_LIBRARY_PATH="${X10_TOP}/libfirm/build/debug"
JNA_LIBRARY_PATH="${JNA_LIBRARY_PATH}:${X10_TOP}/liboo/build"
# Some how we can not use -Djna.library.path= as java arguments, otherwise
# liboo won't find the referenced libfirm librarye (not jna can't find it
# but dlopen while opening liboo.so)
export LD_LIBRARY_PATH="$JNA_LIBRARY_PATH"
# and for our OS/X friends
export DYLD_LIBRARY_PATH="$JNA_LIBRARY_PATH"

# The following is from x10c++
export X10_DIST="${MYDIR}/.."
export CP_OVERRIDE="${classpath}:"
export DEXT="x10firm.ExtensionInfo"

exec "${X10_DIST}/bin/x10c" "$@"

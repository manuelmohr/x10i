<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project name="x10.firm_stdlib" default="dist" basedir=".">
    <property name="x10.home" value="${basedir}/.."/>
    <property name="x10.dist.location" value="${x10.home}/x10.dist"/>
    <property name="x10.constraints.location" location="${x10.home}/x10.constraints"/>
    <property name="x10.common.location" location="${x10.home}/x10.common"/>
    <property name="build" location="${basedir}/classes"/>
    <property name="gen" location="${basedir}/gen"/>
    <property name="src" location="${x10.home}/x10.runtime/src-java"/>
    <property name="inc" location="${x10.dist.location}/include"/>
    <property name="lib" location="${x10.dist.location}/lib"/>
    <property name="stdlib" location="${x10.dist.location}/firm-stdlib"/>
    <property name="jar" value="x10_firm.jar"/>
    <property name="math.jar" value="${lib}/commons-math-2.2.jar"/>
    <property name="bash.exe" value="bash"/>
    <property name="optimize" value="false" />
    <property name="debug" value="false" />
    <path id="project.classpath">
        <path refid="mainproject.classpath"/>
        <path refid="x10.constraints.classpath"/>
        <path refid="x10.common.classpath"/>
        <pathelement path="${math.jar}"/>
    </path>
    <path id="mainproject.classpath">
        <pathelement location="${build}"/>
    </path>
    <path id="x10.constraints.classpath">
        <pathelement location="${x10.constraints.location}/classes"/>
    </path>
    <path id="x10.common.classpath">
        <pathelement location="${x10.common.location}/classes"/>
    </path>
    <!-- get the environment variables -->
    <property environment="env"/>

    <!-- set up to use ECJ -->
    <property name="ejc.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
    <property name="ejc.classpath" location="${lib}/ecj.jar"/>

    <target name="init">
        <mkdir dir="${build}"/>
        <mkdir dir="${gen}"/>
        <javac destdir="${build}" source="1.5" target="1.5" debug="on" nowarn="on">
            <src path="${x10.common.location}/contrib/ant"/>
            <include name="Ejc.java"/>
            <include name="IfTask.java"/>
            <classpath>
              <path refid="project.classpath"/>
            </classpath>
        </javac>
        <!-- Allow using the Eclipse compiler -->
        <taskdef name="ejc" classname="Ejc">
            <classpath>
                <pathelement location="${ejc.classpath}"/>
                <pathelement location="${build}"/>
            </classpath>
        </taskdef>
        <!-- use ECJ instead of javac (needs ecj.jar on the classpath) -->
        <!--<property name="build.compiler" value="${ejc.compiler}"/>-->

        <!-- allow simpler specification of conditional tasks -->
        <taskdef name="if" classname ="IfTask" classpath="${build}" />
    </target>
    
    <condition property="x10c.optimize" value="-O" else="">
        <istrue value="${optimize}" />
    </condition>
    <condition property="x10c.inline_optimizations" value="-INLINE_OPTIMIZATIONS=true" else="">
        <istrue value="${INLINE_OPTIMIZATIONS}" />
    </condition>
    <condition property="x10c.experimental" value="-EXPERIMENTAL=true" else="">
        <istrue value="${EXPERIMENTAL}" />
    </condition>
    <condition property="x10c.no_checks" value="-NO_CHECKS=true" else="">
        <istrue value="${NO_CHECKS}" />
    </condition>

    <target name="available-procs" unless="available.procs">
        <property name="available.procs" value="2"/>
    </target>

    <target name="distclean" depends="distclean-firm"/>
    <target name="clean" depends="clean-firm"/>
    <target name="distclean-firm" depends="clean-firm"/>
    <target name="clean-firm">
        <delete dir="${build}" failonerror="false"/>
        <delete failonerror="false"> <!-- keep the gen directory itself because Eclipse needs it -->
            <fileset dir="${gen}">
                <include name="**"/>
            </fileset>
        </delete>
    </target>

    <target name="dist-firm" depends="jar">
        <mkdir dir="${stdlib}"/>
        <copy todir="${stdlib}">
            <fileset dir="${gen}" includes="${jar}"/>
        </copy>
    </target>
    <target name="dist-firm-x10rt" depends="dist-firm"/>

    <target name="dist" depends="dist-firm,jar" description="generate part of the distribution">
    </target>
    
    <target name="jar" depends="build-xrx">
        <jar jarfile="${gen}/${jar}">
            <fileset dir="${build}" includes="x10/**/*.class" excludes="${jar}"/>
            <fileset dir="${basedir}/src-x10" includes="x10/**" excludes="${jar}"/>
            <fileset dir="${x10.constraints.location}/classes" includes="x10/constraint/**" excludes="x10/constraint/test/**"/>
            <fileset dir="${x10.common.location}/classes" includes="x10/**"/>
        </jar>
        <copy todir="${build}"><!-- copy x10.jar into classes to let scripts find it there too -->
            <fileset dir="${gen}" includes="${jar}"/>
        </copy>
    </target>
    <target name="gen-xrj" depends="init">
        <java classname="x10c.util.MakeFun" classpath="${x10.dist.location}/lib/x10c.jar" fork="true" dir="${gen}"/>
    </target>
    <target name="build-firm" depends="init,gen-xrx,gen-xrj">
        <ejc destdir="${build}" source="1.5" target="1.5" debug="on" nowarn="on">
            <src path="${src}"/>
            <size value="50" when="more"/>
            <classpath>
              <path refid="project.classpath"/>
              <path>
                  <pathelement location="${build}"/>
              </path>
            </classpath>
        </ejc>
    </target>
    
    <target name="gen-xrx" depends="init,check-xrx" unless="xrx.uptodate">
        <echo message="Building Java sources for XRX"/>
        <fileset id="changed.xrx.files" dir="${basedir}/src-x10" includes="**/*.x10">
            <depend targetdir="${gen}">
                <mapper type="glob" from="*.x10" to="*.java"/>
            </depend>
        </fileset>
        <pathconvert property="xrx.list" refid="changed.xrx.files" dirsep="/" pathsep=" ">
            <map from="${basedir}${file.separator}src-x10${file.separator}" to=""/>
        </pathconvert>
        <!-- <echo message="x10c ${x10c.optimize} ${x10c.experimental} ${x10c.inline_optimizations} ${x10c.no_checks} ${x10c.multi_node} -c ${xrx.list}"/> -->
        <echo message="x10c ${x10c.optimize} ${x10c.experimental} ${x10c.inline_optimizations} ${x10c.no_checks} -c ${xrx.list}"/>
        <exec executable="${bash.exe}" failonerror="true" dir="${basedir}/src-x10">
            <arg value="-c" />
            <arg value="'${x10.dist.location}/bin/x10c' -J-Xmx512M ${x10c.optimize} ${x10c.experimental} ${x10c.inline_optimizations} ${x10c.no_checks} -d '${gen}' -J-ea -rtdev -sourcepath . -STATIC_CHECKS -commandlineonly -c ${xrx.list}" />
        </exec>
    </target>
    
    <target name="build-x10-x10rt" depends="init">
        <ejc destdir="${build}" source="1.5" target="1.5" debug="on" nowarn="on">
            <src path="${src}/x10/x10rt"/>
            <size value="50" when="more"/>
            <classpath>
              <path refid="project.classpath"/>
              <path>
                  <pathelement location="${build}"/>
              </path>
            </classpath>
        </ejc>
    </target>
    <!-- TODO: check the generated files with respect to the compiler jar -->
    <target name="check-xrx" depends="init">
        <fileset id="xrx.files" dir="${basedir}/src-x10" includes="**/*.x10"/>
        <uptodate property="xrx.uptodate">
            <srcfiles refid="xrx.files"/>
            <globmapper from="*.x10" to="${gen}/*.java" handledirsep="true"/>
        </uptodate>
    </target>

    <target name="build-xrx" depends="init,gen-xrx,build-firm">
        <!--
        <ejc destdir="${build}" source="1.5" target="1.5" debug="on" nowarn="on">
            <src path="${gen}"/>
            <size value="50" when="more"/>
            <classpath>
              <path refid="project.classpath"/>
              <path>
                  <pathelement location="${build}"/>
              </path>
            </classpath>
        </ejc>
        -->
    </target>

    <target name="build" depends="build-xrx">
        <echo message="${ant.project.name}: ${ant.file}"/>
    </target>

</project>
